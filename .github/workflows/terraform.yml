name: Terraform CI/CD

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: service-project-dev-1a
  GAR_LOCATION: us-west2
  REGION: us-west2
  DOCKER_REPO: my-repository

jobs:
  terraform:
    permissions:
      contents: 'read'
      id-token: 'write'
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        # Inform a working directory if .tf files are not in root folder
        working-directory: ./terraform

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Authenticate to Google Cloud using Workload Identity Federation
      - name: 'Google auth'
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/89346032191/locations/global/workloadIdentityPools/github-actions-cloud-run/providers/github'
          service_account: 'github-cloud-deploy-sa@service-project-dev-1a.iam.gserviceaccount.com'
          token_format: 'access_token'

      # Set up Google Cloud SDK
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
        with:
          project_id: '${{ env.PROJECT_ID }}'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: Build the Java application
        run: |
          cd ..
          ./gradlew build

      - name: Configure Docker for Google Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build Docker Image
        run: docker build -f ../Dockerfile -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.DOCKER_REPO }}/movies:${{ github.sha }} ../

      - name: Push Docker Image to GAR
        run: docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.DOCKER_REPO }}/movies:${{ github.sha }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a
      # Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.4

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state,
      # downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false -var "omdb_api_key=${{ secrets.OMDB_API_KEY }}"

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud".
      # See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var "omdb_api_key=${{ secrets.OMDB_API_KEY }}"

      # Install Helm
      - name: Set up Helm
        uses: azure/setup-helm@v1

      # Helm install
      - name: Helm install
        run: |
          helm upgrade --install movies-chart ../movies-chart \
          --set env.SPRING_PROFILES_ACTIVE=dev \
          --set secrets.omdb_api_key=${{ secrets.OMDB_API_KEY }} \
          --namespace default
